name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"
        python -c "import pyhetznerserver; print('Package imported successfully')"
    
    - name: Lint with flake8
      continue-on-error: true
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 errors found"
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check code formatting with Black
      continue-on-error: true
      run: |
        black --check --diff . || echo "Black formatting issues found"
    
    - name: Check import sorting with isort
      continue-on-error: true
      run: |
        isort --check-only --diff . || echo "Import sorting issues found"
    
    - name: Type checking with mypy
      continue-on-error: true
      run: |
        mypy pyhetznerserver/ --ignore-missing-imports || echo "MyPy type checking issues found"
    
    - name: Debug project structure
      run: |
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Directory structure:"
        ls -la
        echo "Tests directory:"
        ls -la tests/ || echo "No tests directory"
        echo "Python path:"
        python -c "import sys; print(sys.path)"
    
    - name: Test with pytest
      run: |
        python -m pytest --cov=pyhetznerserver --cov-report=xml --cov-report=term-missing --verbose
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: |
        bandit -r pyhetznerserver/ -ll
    
    - name: Run Safety check
      run: |
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/ 